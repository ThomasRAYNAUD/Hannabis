import socket
import os
import sys
import time
import multiprocessing
from multiprocessing import Process

def receive(client_socket):
    data = client_socket.recv(1024)
    return decode(data)

def decode(message):
    
    message_parts = message.decode('utf-8').split("|")
    return message_parts

def type(tab):
   
    if tab[0] == "N":
        return tab[1] 
def player(tab_data):
    verif = True
    while verif:
        try:
            val = int(input(tab_data[1]))
            print(val)
            if 2 <= val <= 5:
                verif = False
                return val
            else:
                print("Veuillez entrer un entier entre 2 et 5.")
        except ValueError:
            print("Veuillez entrer un entier entre 2 et 5.")

def send(type, nb_player, client_socket):
    
    if type == "N": 
        chaine = str(nb_player)
        m = type + "|" + chaine
        print(m)
        client_socket.sendall(m.encode('utf-8'))

def clear_terminal():
    os.system('clear')

def create_socket(port, host="localhost"):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))
    return client_socket


def player_process(player_number, parent_socket, host):
    client_socket = parent_socket.accept()[0]

    while True:
        # Socket communication logic here
        data = client_socket.recv(1024)
        if not data:
            break  # Exit the loop if no more data is received

        message_parts = decode(data)
        # Process the message_parts as needed

    client_socket.close()

def processes(nb_player):
    processes = []

    for i in range(nb_player):
        port = 26001
        process = multiprocessing.Process(target=create_socket, args=(port, HOST))
        processes.append(process)
        process.start()
    for process in processes:
        process.join()



if __name__ == "__main__":
    HOST = "localhost"
    PORT = 26001

    with create_socket(PORT, HOST) as client_socket:
        tab_data = receive(client_socket)
        nb_player = player(tab_data)
        send("N", nb_player, client_socket)

        

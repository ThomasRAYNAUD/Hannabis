import random
import socket
import os
import signal
from multiprocessing import Process
import sys

Carte = (str, int)
nombre_de_joueurs = 4


class Pile:
    def __init__(self, couleur):
        self.couleur = couleur
        self.valeur = 0


class Joueur:
    def __init__(self, nom, cartes):
        self.nom = nom
        self.cartes = cartes


class Jetons:
    def __init__(self, nombre_de_joueurs):
        self.infos = 3 + nombre_de_joueurs
        self.fuse = 3


def creer_jeu_de_cartes():
    couleurs = ["r", "b", "v", "j", "n"]
    nombres = [1, 2, 3, 4, 5]
    cartes = []

    for couleur in couleurs[:nombre_de_joueurs]:  # Utiliser les trois premières couleurs
        for nombre in nombres:
            if nombre == 1:
                nb_exemplaires = 3
            elif 2 <= nombre <= 4:
                nb_exemplaires = 2
            else:
                nb_exemplaires = 1
            for _ in range(nb_exemplaires):
                cartes.append((couleur, nombre))

    return cartes


def tirer_mains_des_joueurs(nombre_de_joueurs, jeu_de_cartes):
    couleurs_a_utiliser = random.sample(["r", "b", "v"], min(3, nombre_de_joueurs))

    jeu_reduit = [carte for carte in jeu_de_cartes if carte[0] in couleurs_a_utiliser]

    return {
        f" {i+1}": Joueur(f" {i+1}", random.sample(jeu_reduit, 5))
        for i in range(nombre_de_joueurs)
    }


def handler(sig, frame):
    if sig == signal.SIGINT:
        print("Received SIGINT. Exiting...")
        sys.exit()


def connection(client_socket, address, joueurs):
    with client_socket:
        print(f"Connected to client: {address}")

        for joueur, info in joueurs.items():
            cartes_str = ', '.join([f"('{couleur}', {nombre})" for couleur, nombre in info.cartes])
            data = f"i|{info.nom}|[{cartes_str}]\n"
            client_socket.send(data.encode('utf-8'))
            print(data)



        print(f"Disconnecting from client: {address}")


if __name__ == "__main__":
    signal.signal(signal.SIGINT, handler)

    cartes = creer_jeu_de_cartes()
    print(cartes)

    jetons = Jetons(nombre_de_joueurs)

    couleurs = ["R", "B", "V", "J", "N"]
    piles_couleurs = {couleur: Pile(couleur) for couleur in couleurs[:nombre_de_joueurs]}

    joueurs = tirer_mains_des_joueurs(nombre_de_joueurs, cartes)

    for joueur, info in joueurs.items():
        print(f"{info.nom} :")
        for carte in info.cartes:
            print(f"Carte : {carte[0]} - Numéro : {carte[1]}")

    print("Piles Couleurs :")
    for pile in piles_couleurs.values():
        print(f"{pile.couleur}, {pile.valeur}")

    print("Jetons disponibles :")
    print("Jetons Fuse :", jetons.fuse, "\nJetons Infos :", jetons.infos)

    HOST = "localhost"
    PORT = 25425

    # Configuration du socket du serveur
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        ADDR = (HOST, PORT)
        server_socket.bind(ADDR)
        server_socket.listen(1)
        print(f"Server is listening on {HOST}:{PORT}")

        while True:
            print("Waiting for a connection...")
            client_socket, address = server_socket.accept()
            p = Process(target=connection, args=(client_socket, address, joueurs))
            p.start()
